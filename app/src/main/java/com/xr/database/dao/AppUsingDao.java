package com.xr.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xr.happyFamily.le.pojo.AppUsing;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_USING".
*/
public class AppUsingDao extends AbstractDao<AppUsing, Integer> {

    public static final String TABLENAME = "APP_USING";

    /**
     * Properties of entity AppUsing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property IconAdress = new Property(1, String.class, "iconAdress", false, "ICON_ADRESS");
        public final static Property AppName = new Property(2, String.class, "appName", false, "APP_NAME");
        public final static Property AppUseLastTime = new Property(3, String.class, "appUseLastTime", false, "APP_USE_LAST_TIME");
        public final static Property UseTime = new Property(4, String.class, "useTime", false, "USE_TIME");
        public final static Property AppDerailId = new Property(5, int.class, "appDerailId", false, "APP_DERAIL_ID");
    }


    public AppUsingDao(DaoConfig config) {
        super(config);
    }
    
    public AppUsingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_USING\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ICON_ADRESS\" TEXT," + // 1: iconAdress
                "\"APP_NAME\" TEXT," + // 2: appName
                "\"APP_USE_LAST_TIME\" TEXT," + // 3: appUseLastTime
                "\"USE_TIME\" TEXT," + // 4: useTime
                "\"APP_DERAIL_ID\" INTEGER NOT NULL );"); // 5: appDerailId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_USING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppUsing entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String iconAdress = entity.getIconAdress();
        if (iconAdress != null) {
            stmt.bindString(2, iconAdress);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        String appUseLastTime = entity.getAppUseLastTime();
        if (appUseLastTime != null) {
            stmt.bindString(4, appUseLastTime);
        }
 
        String useTime = entity.getUseTime();
        if (useTime != null) {
            stmt.bindString(5, useTime);
        }
        stmt.bindLong(6, entity.getAppDerailId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppUsing entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String iconAdress = entity.getIconAdress();
        if (iconAdress != null) {
            stmt.bindString(2, iconAdress);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        String appUseLastTime = entity.getAppUseLastTime();
        if (appUseLastTime != null) {
            stmt.bindString(4, appUseLastTime);
        }
 
        String useTime = entity.getUseTime();
        if (useTime != null) {
            stmt.bindString(5, useTime);
        }
        stmt.bindLong(6, entity.getAppDerailId());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public AppUsing readEntity(Cursor cursor, int offset) {
        AppUsing entity = new AppUsing( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iconAdress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appUseLastTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // useTime
            cursor.getInt(offset + 5) // appDerailId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppUsing entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setIconAdress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppUseLastTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUseTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppDerailId(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(AppUsing entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(AppUsing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppUsing entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
