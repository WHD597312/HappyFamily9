package com.xr.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xr.happyFamily.jia.pojo.DeviceChild;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_CHILD".
*/
public class DeviceChildDao extends AbstractDao<DeviceChild, Long> {

    public static final String TABLENAME = "DEVICE_CHILD";

    /**
     * Properties of entity DeviceChild.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Online = new Property(1, boolean.class, "online", false, "ONLINE");
        public final static Property HouseId = new Property(2, long.class, "houseId", false, "HOUSE_ID");
        public final static Property RoomId = new Property(3, long.class, "roomId", false, "ROOM_ID");
        public final static Property DeviceUsedCount = new Property(4, int.class, "deviceUsedCount", false, "DEVICE_USED_COUNT");
        public final static Property RoomName = new Property(5, String.class, "roomName", false, "ROOM_NAME");
        public final static Property Common = new Property(6, String.class, "common", false, "COMMON");
        public final static Property Share = new Property(7, String.class, "share", false, "SHARE");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
        public final static Property BusModel = new Property(9, int.class, "busModel", false, "BUS_MODEL");
        public final static Property MacAddress = new Property(10, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property TimerMoudle = new Property(12, int.class, "timerMoudle", false, "TIMER_MOUDLE");
        public final static Property McuVersion = new Property(13, String.class, "mcuVersion", false, "MCU_VERSION");
        public final static Property WifiVersion = new Property(14, String.class, "wifiVersion", false, "WIFI_VERSION");
        public final static Property WaramerSetTemp = new Property(15, int.class, "waramerSetTemp", false, "WARAMER_SET_TEMP");
        public final static Property WarmerCurTemp = new Property(16, int.class, "warmerCurTemp", false, "WARMER_CUR_TEMP");
        public final static Property WarmerSampleData = new Property(17, int.class, "warmerSampleData", false, "WARMER_SAMPLE_DATA");
        public final static Property WarmerRatePower = new Property(18, int.class, "warmerRatePower", false, "WARMER_RATE_POWER");
        public final static Property WarmerCurRunRoatePower = new Property(19, int.class, "warmerCurRunRoatePower", false, "WARMER_CUR_RUN_ROATE_POWER");
        public final static Property WarmerRunState = new Property(20, int.class, "warmerRunState", false, "WARMER_RUN_STATE");
        public final static Property DeviceState = new Property(21, int.class, "deviceState", false, "DEVICE_STATE");
        public final static Property RateState = new Property(22, String.class, "rateState", false, "RATE_STATE");
        public final static Property LockState = new Property(23, int.class, "lockState", false, "LOCK_STATE");
        public final static Property ScreenState = new Property(24, int.class, "screenState", false, "SCREEN_STATE");
        public final static Property CurRunState2 = new Property(25, int.class, "curRunState2", false, "CUR_RUN_STATE2");
        public final static Property CurRunState3 = new Property(26, int.class, "curRunState3", false, "CUR_RUN_STATE3");
        public final static Property TimerHour = new Property(27, int.class, "timerHour", false, "TIMER_HOUR");
        public final static Property TimerMin = new Property(28, int.class, "timerMin", false, "TIMER_MIN");
        public final static Property CheckCode = new Property(29, int.class, "checkCode", false, "CHECK_CODE");
        public final static Property EndCode = new Property(30, int.class, "endCode", false, "END_CODE");
        public final static Property UserId = new Property(31, int.class, "userId", false, "USER_ID");
        public final static Property Img = new Property(32, int.class, "img", false, "IMG");
        public final static Property DeviceId = new Property(33, int.class, "deviceId", false, "DEVICE_ID");
        public final static Property Linked = new Property(34, int.class, "linked", false, "LINKED");
        public final static Property LinkedSensorId = new Property(35, int.class, "linkedSensorId", false, "LINKED_SENSOR_ID");
        public final static Property ShareId = new Property(36, long.class, "shareId", false, "SHARE_ID");
        public final static Property SensorState = new Property(37, int.class, "sensorState", false, "SENSOR_STATE");
        public final static Property SensorSimpleTemp = new Property(38, int.class, "sensorSimpleTemp", false, "SENSOR_SIMPLE_TEMP");
        public final static Property SensorSimpleHum = new Property(39, int.class, "sensorSimpleHum", false, "SENSOR_SIMPLE_HUM");
        public final static Property SorsorPm = new Property(40, int.class, "sorsorPm", false, "SORSOR_PM");
        public final static Property SensorOx = new Property(41, int.class, "sensorOx", false, "SENSOR_OX");
        public final static Property SensorHcho = new Property(42, int.class, "sensorHcho", false, "SENSOR_HCHO");
        public final static Property SocketPower = new Property(43, int.class, "socketPower", false, "SOCKET_POWER");
        public final static Property SocketTemp = new Property(44, int.class, "socketTemp", false, "SOCKET_TEMP");
        public final static Property SocketState = new Property(45, int.class, "socketState", false, "SOCKET_STATE");
        public final static Property SocketTimer = new Property(46, int.class, "socketTimer", false, "SOCKET_TIMER");
        public final static Property SocketTimerOpenHour = new Property(47, int.class, "socketTimerOpenHour", false, "SOCKET_TIMER_OPEN_HOUR");
        public final static Property SocketTimerOpenMin = new Property(48, int.class, "socketTimerOpenMin", false, "SOCKET_TIMER_OPEN_MIN");
        public final static Property SocketTimerCloseHour = new Property(49, int.class, "socketTimerCloseHour", false, "SOCKET_TIMER_CLOSE_HOUR");
        public final static Property SocketTimerCloseMin = new Property(50, int.class, "socketTimerCloseMin", false, "SOCKET_TIMER_CLOSE_MIN");
        public final static Property SocketCurrent = new Property(51, int.class, "socketCurrent", false, "SOCKET_CURRENT");
        public final static Property SocketVal = new Property(52, int.class, "socketVal", false, "SOCKET_VAL");
        public final static Property SocketPowerConsume = new Property(53, int.class, "socketPowerConsume", false, "SOCKET_POWER_CONSUME");
        public final static Property SocketTimerMode = new Property(54, int.class, "socketTimerMode", false, "SOCKET_TIMER_MODE");
        public final static Property IsSocketTimerMode = new Property(55, int.class, "isSocketTimerMode", false, "IS_SOCKET_TIMER_MODE");
        public final static Property WPurifierEndTime = new Property(56, int.class, "wPurifierEndTime", false, "W_PURIFIER_END_TIME");
        public final static Property WPurifierEndFlow = new Property(57, int.class, "wPurifierEndFlow", false, "W_PURIFIER_END_FLOW");
        public final static Property WPurifierState = new Property(58, String.class, "wPurifierState", false, "W_PURIFIER_STATE");
        public final static Property WPurifierFlowData = new Property(59, int.class, "wPurifierFlowData", false, "W_PURIFIER_FLOW_DATA");
        public final static Property WPurifierPrimaryQuqlity = new Property(60, int.class, "wPurifierPrimaryQuqlity", false, "W_PURIFIER_PRIMARY_QUQLITY");
        public final static Property WPurifierCurTemp = new Property(61, int.class, "wPurifierCurTemp", false, "W_PURIFIER_CUR_TEMP");
        public final static Property WPurifierOutQuqlity = new Property(62, int.class, "wPurifierOutQuqlity", false, "W_PURIFIER_OUT_QUQLITY");
        public final static Property WPurifierfilter1 = new Property(63, int.class, "wPurifierfilter1", false, "W_PURIFIERFILTER1");
        public final static Property WPurifierfilter2 = new Property(64, int.class, "wPurifierfilter2", false, "W_PURIFIERFILTER2");
        public final static Property WPurifierfilter3 = new Property(65, int.class, "wPurifierfilter3", false, "W_PURIFIERFILTER3");
        public final static Property WPurifierfilter4 = new Property(66, int.class, "wPurifierfilter4", false, "W_PURIFIERFILTER4");
        public final static Property WPurifierfilter5 = new Property(67, int.class, "wPurifierfilter5", false, "W_PURIFIERFILTER5");
        public final static Property WPurifierfilter6 = new Property(68, int.class, "wPurifierfilter6", false, "W_PURIFIERFILTER6");
        public final static Property WPurifierfilter7 = new Property(69, int.class, "wPurifierfilter7", false, "W_PURIFIERFILTER7");
        public final static Property WPurifierfilter8 = new Property(70, int.class, "wPurifierfilter8", false, "W_PURIFIERFILTER8");
        public final static Property WPurifierfilter9 = new Property(71, int.class, "wPurifierfilter9", false, "W_PURIFIERFILTER9");
        public final static Property WPurifierfilter10 = new Property(72, int.class, "wPurifierfilter10", false, "W_PURIFIERFILTER10");
    }


    public DeviceChildDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceChildDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_CHILD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ONLINE\" INTEGER NOT NULL ," + // 1: online
                "\"HOUSE_ID\" INTEGER NOT NULL ," + // 2: houseId
                "\"ROOM_ID\" INTEGER NOT NULL ," + // 3: roomId
                "\"DEVICE_USED_COUNT\" INTEGER NOT NULL ," + // 4: deviceUsedCount
                "\"ROOM_NAME\" TEXT," + // 5: roomName
                "\"COMMON\" TEXT," + // 6: common
                "\"SHARE\" TEXT," + // 7: share
                "\"TYPE\" INTEGER NOT NULL ," + // 8: type
                "\"BUS_MODEL\" INTEGER NOT NULL ," + // 9: busModel
                "\"MAC_ADDRESS\" TEXT," + // 10: macAddress
                "\"NAME\" TEXT," + // 11: name
                "\"TIMER_MOUDLE\" INTEGER NOT NULL ," + // 12: timerMoudle
                "\"MCU_VERSION\" TEXT," + // 13: mcuVersion
                "\"WIFI_VERSION\" TEXT," + // 14: wifiVersion
                "\"WARAMER_SET_TEMP\" INTEGER NOT NULL ," + // 15: waramerSetTemp
                "\"WARMER_CUR_TEMP\" INTEGER NOT NULL ," + // 16: warmerCurTemp
                "\"WARMER_SAMPLE_DATA\" INTEGER NOT NULL ," + // 17: warmerSampleData
                "\"WARMER_RATE_POWER\" INTEGER NOT NULL ," + // 18: warmerRatePower
                "\"WARMER_CUR_RUN_ROATE_POWER\" INTEGER NOT NULL ," + // 19: warmerCurRunRoatePower
                "\"WARMER_RUN_STATE\" INTEGER NOT NULL ," + // 20: warmerRunState
                "\"DEVICE_STATE\" INTEGER NOT NULL ," + // 21: deviceState
                "\"RATE_STATE\" TEXT," + // 22: rateState
                "\"LOCK_STATE\" INTEGER NOT NULL ," + // 23: lockState
                "\"SCREEN_STATE\" INTEGER NOT NULL ," + // 24: screenState
                "\"CUR_RUN_STATE2\" INTEGER NOT NULL ," + // 25: curRunState2
                "\"CUR_RUN_STATE3\" INTEGER NOT NULL ," + // 26: curRunState3
                "\"TIMER_HOUR\" INTEGER NOT NULL ," + // 27: timerHour
                "\"TIMER_MIN\" INTEGER NOT NULL ," + // 28: timerMin
                "\"CHECK_CODE\" INTEGER NOT NULL ," + // 29: checkCode
                "\"END_CODE\" INTEGER NOT NULL ," + // 30: endCode
                "\"USER_ID\" INTEGER NOT NULL ," + // 31: userId
                "\"IMG\" INTEGER NOT NULL ," + // 32: img
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 33: deviceId
                "\"LINKED\" INTEGER NOT NULL ," + // 34: linked
                "\"LINKED_SENSOR_ID\" INTEGER NOT NULL ," + // 35: linkedSensorId
                "\"SHARE_ID\" INTEGER NOT NULL ," + // 36: shareId
                "\"SENSOR_STATE\" INTEGER NOT NULL ," + // 37: sensorState
                "\"SENSOR_SIMPLE_TEMP\" INTEGER NOT NULL ," + // 38: sensorSimpleTemp
                "\"SENSOR_SIMPLE_HUM\" INTEGER NOT NULL ," + // 39: sensorSimpleHum
                "\"SORSOR_PM\" INTEGER NOT NULL ," + // 40: sorsorPm
                "\"SENSOR_OX\" INTEGER NOT NULL ," + // 41: sensorOx
                "\"SENSOR_HCHO\" INTEGER NOT NULL ," + // 42: sensorHcho
                "\"SOCKET_POWER\" INTEGER NOT NULL ," + // 43: socketPower
                "\"SOCKET_TEMP\" INTEGER NOT NULL ," + // 44: socketTemp
                "\"SOCKET_STATE\" INTEGER NOT NULL ," + // 45: socketState
                "\"SOCKET_TIMER\" INTEGER NOT NULL ," + // 46: socketTimer
                "\"SOCKET_TIMER_OPEN_HOUR\" INTEGER NOT NULL ," + // 47: socketTimerOpenHour
                "\"SOCKET_TIMER_OPEN_MIN\" INTEGER NOT NULL ," + // 48: socketTimerOpenMin
                "\"SOCKET_TIMER_CLOSE_HOUR\" INTEGER NOT NULL ," + // 49: socketTimerCloseHour
                "\"SOCKET_TIMER_CLOSE_MIN\" INTEGER NOT NULL ," + // 50: socketTimerCloseMin
                "\"SOCKET_CURRENT\" INTEGER NOT NULL ," + // 51: socketCurrent
                "\"SOCKET_VAL\" INTEGER NOT NULL ," + // 52: socketVal
                "\"SOCKET_POWER_CONSUME\" INTEGER NOT NULL ," + // 53: socketPowerConsume
                "\"SOCKET_TIMER_MODE\" INTEGER NOT NULL ," + // 54: socketTimerMode
                "\"IS_SOCKET_TIMER_MODE\" INTEGER NOT NULL ," + // 55: isSocketTimerMode
                "\"W_PURIFIER_END_TIME\" INTEGER NOT NULL ," + // 56: wPurifierEndTime
                "\"W_PURIFIER_END_FLOW\" INTEGER NOT NULL ," + // 57: wPurifierEndFlow
                "\"W_PURIFIER_STATE\" TEXT," + // 58: wPurifierState
                "\"W_PURIFIER_FLOW_DATA\" INTEGER NOT NULL ," + // 59: wPurifierFlowData
                "\"W_PURIFIER_PRIMARY_QUQLITY\" INTEGER NOT NULL ," + // 60: wPurifierPrimaryQuqlity
                "\"W_PURIFIER_CUR_TEMP\" INTEGER NOT NULL ," + // 61: wPurifierCurTemp
                "\"W_PURIFIER_OUT_QUQLITY\" INTEGER NOT NULL ," + // 62: wPurifierOutQuqlity
                "\"W_PURIFIERFILTER1\" INTEGER NOT NULL ," + // 63: wPurifierfilter1
                "\"W_PURIFIERFILTER2\" INTEGER NOT NULL ," + // 64: wPurifierfilter2
                "\"W_PURIFIERFILTER3\" INTEGER NOT NULL ," + // 65: wPurifierfilter3
                "\"W_PURIFIERFILTER4\" INTEGER NOT NULL ," + // 66: wPurifierfilter4
                "\"W_PURIFIERFILTER5\" INTEGER NOT NULL ," + // 67: wPurifierfilter5
                "\"W_PURIFIERFILTER6\" INTEGER NOT NULL ," + // 68: wPurifierfilter6
                "\"W_PURIFIERFILTER7\" INTEGER NOT NULL ," + // 69: wPurifierfilter7
                "\"W_PURIFIERFILTER8\" INTEGER NOT NULL ," + // 70: wPurifierfilter8
                "\"W_PURIFIERFILTER9\" INTEGER NOT NULL ," + // 71: wPurifierfilter9
                "\"W_PURIFIERFILTER10\" INTEGER NOT NULL );"); // 72: wPurifierfilter10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_CHILD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceChild entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOnline() ? 1L: 0L);
        stmt.bindLong(3, entity.getHouseId());
        stmt.bindLong(4, entity.getRoomId());
        stmt.bindLong(5, entity.getDeviceUsedCount());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(6, roomName);
        }
 
        String common = entity.getCommon();
        if (common != null) {
            stmt.bindString(7, common);
        }
 
        String share = entity.getShare();
        if (share != null) {
            stmt.bindString(8, share);
        }
        stmt.bindLong(9, entity.getType());
        stmt.bindLong(10, entity.getBusModel());
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(11, macAddress);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
        stmt.bindLong(13, entity.getTimerMoudle());
 
        String mcuVersion = entity.getMcuVersion();
        if (mcuVersion != null) {
            stmt.bindString(14, mcuVersion);
        }
 
        String wifiVersion = entity.getWifiVersion();
        if (wifiVersion != null) {
            stmt.bindString(15, wifiVersion);
        }
        stmt.bindLong(16, entity.getWaramerSetTemp());
        stmt.bindLong(17, entity.getWarmerCurTemp());
        stmt.bindLong(18, entity.getWarmerSampleData());
        stmt.bindLong(19, entity.getWarmerRatePower());
        stmt.bindLong(20, entity.getWarmerCurRunRoatePower());
        stmt.bindLong(21, entity.getWarmerRunState());
        stmt.bindLong(22, entity.getDeviceState());
 
        String rateState = entity.getRateState();
        if (rateState != null) {
            stmt.bindString(23, rateState);
        }
        stmt.bindLong(24, entity.getLockState());
        stmt.bindLong(25, entity.getScreenState());
        stmt.bindLong(26, entity.getCurRunState2());
        stmt.bindLong(27, entity.getCurRunState3());
        stmt.bindLong(28, entity.getTimerHour());
        stmt.bindLong(29, entity.getTimerMin());
        stmt.bindLong(30, entity.getCheckCode());
        stmt.bindLong(31, entity.getEndCode());
        stmt.bindLong(32, entity.getUserId());
        stmt.bindLong(33, entity.getImg());
        stmt.bindLong(34, entity.getDeviceId());
        stmt.bindLong(35, entity.getLinked());
        stmt.bindLong(36, entity.getLinkedSensorId());
        stmt.bindLong(37, entity.getShareId());
        stmt.bindLong(38, entity.getSensorState());
        stmt.bindLong(39, entity.getSensorSimpleTemp());
        stmt.bindLong(40, entity.getSensorSimpleHum());
        stmt.bindLong(41, entity.getSorsorPm());
        stmt.bindLong(42, entity.getSensorOx());
        stmt.bindLong(43, entity.getSensorHcho());
        stmt.bindLong(44, entity.getSocketPower());
        stmt.bindLong(45, entity.getSocketTemp());
        stmt.bindLong(46, entity.getSocketState());
        stmt.bindLong(47, entity.getSocketTimer());
        stmt.bindLong(48, entity.getSocketTimerOpenHour());
        stmt.bindLong(49, entity.getSocketTimerOpenMin());
        stmt.bindLong(50, entity.getSocketTimerCloseHour());
        stmt.bindLong(51, entity.getSocketTimerCloseMin());
        stmt.bindLong(52, entity.getSocketCurrent());
        stmt.bindLong(53, entity.getSocketVal());
        stmt.bindLong(54, entity.getSocketPowerConsume());
        stmt.bindLong(55, entity.getSocketTimerMode());
        stmt.bindLong(56, entity.getIsSocketTimerMode());
        stmt.bindLong(57, entity.getWPurifierEndTime());
        stmt.bindLong(58, entity.getWPurifierEndFlow());
 
        String wPurifierState = entity.getWPurifierState();
        if (wPurifierState != null) {
            stmt.bindString(59, wPurifierState);
        }
        stmt.bindLong(60, entity.getWPurifierFlowData());
        stmt.bindLong(61, entity.getWPurifierPrimaryQuqlity());
        stmt.bindLong(62, entity.getWPurifierCurTemp());
        stmt.bindLong(63, entity.getWPurifierOutQuqlity());
        stmt.bindLong(64, entity.getWPurifierfilter1());
        stmt.bindLong(65, entity.getWPurifierfilter2());
        stmt.bindLong(66, entity.getWPurifierfilter3());
        stmt.bindLong(67, entity.getWPurifierfilter4());
        stmt.bindLong(68, entity.getWPurifierfilter5());
        stmt.bindLong(69, entity.getWPurifierfilter6());
        stmt.bindLong(70, entity.getWPurifierfilter7());
        stmt.bindLong(71, entity.getWPurifierfilter8());
        stmt.bindLong(72, entity.getWPurifierfilter9());
        stmt.bindLong(73, entity.getWPurifierfilter10());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceChild entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOnline() ? 1L: 0L);
        stmt.bindLong(3, entity.getHouseId());
        stmt.bindLong(4, entity.getRoomId());
        stmt.bindLong(5, entity.getDeviceUsedCount());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(6, roomName);
        }
 
        String common = entity.getCommon();
        if (common != null) {
            stmt.bindString(7, common);
        }
 
        String share = entity.getShare();
        if (share != null) {
            stmt.bindString(8, share);
        }
        stmt.bindLong(9, entity.getType());
        stmt.bindLong(10, entity.getBusModel());
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(11, macAddress);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
        stmt.bindLong(13, entity.getTimerMoudle());
 
        String mcuVersion = entity.getMcuVersion();
        if (mcuVersion != null) {
            stmt.bindString(14, mcuVersion);
        }
 
        String wifiVersion = entity.getWifiVersion();
        if (wifiVersion != null) {
            stmt.bindString(15, wifiVersion);
        }
        stmt.bindLong(16, entity.getWaramerSetTemp());
        stmt.bindLong(17, entity.getWarmerCurTemp());
        stmt.bindLong(18, entity.getWarmerSampleData());
        stmt.bindLong(19, entity.getWarmerRatePower());
        stmt.bindLong(20, entity.getWarmerCurRunRoatePower());
        stmt.bindLong(21, entity.getWarmerRunState());
        stmt.bindLong(22, entity.getDeviceState());
 
        String rateState = entity.getRateState();
        if (rateState != null) {
            stmt.bindString(23, rateState);
        }
        stmt.bindLong(24, entity.getLockState());
        stmt.bindLong(25, entity.getScreenState());
        stmt.bindLong(26, entity.getCurRunState2());
        stmt.bindLong(27, entity.getCurRunState3());
        stmt.bindLong(28, entity.getTimerHour());
        stmt.bindLong(29, entity.getTimerMin());
        stmt.bindLong(30, entity.getCheckCode());
        stmt.bindLong(31, entity.getEndCode());
        stmt.bindLong(32, entity.getUserId());
        stmt.bindLong(33, entity.getImg());
        stmt.bindLong(34, entity.getDeviceId());
        stmt.bindLong(35, entity.getLinked());
        stmt.bindLong(36, entity.getLinkedSensorId());
        stmt.bindLong(37, entity.getShareId());
        stmt.bindLong(38, entity.getSensorState());
        stmt.bindLong(39, entity.getSensorSimpleTemp());
        stmt.bindLong(40, entity.getSensorSimpleHum());
        stmt.bindLong(41, entity.getSorsorPm());
        stmt.bindLong(42, entity.getSensorOx());
        stmt.bindLong(43, entity.getSensorHcho());
        stmt.bindLong(44, entity.getSocketPower());
        stmt.bindLong(45, entity.getSocketTemp());
        stmt.bindLong(46, entity.getSocketState());
        stmt.bindLong(47, entity.getSocketTimer());
        stmt.bindLong(48, entity.getSocketTimerOpenHour());
        stmt.bindLong(49, entity.getSocketTimerOpenMin());
        stmt.bindLong(50, entity.getSocketTimerCloseHour());
        stmt.bindLong(51, entity.getSocketTimerCloseMin());
        stmt.bindLong(52, entity.getSocketCurrent());
        stmt.bindLong(53, entity.getSocketVal());
        stmt.bindLong(54, entity.getSocketPowerConsume());
        stmt.bindLong(55, entity.getSocketTimerMode());
        stmt.bindLong(56, entity.getIsSocketTimerMode());
        stmt.bindLong(57, entity.getWPurifierEndTime());
        stmt.bindLong(58, entity.getWPurifierEndFlow());
 
        String wPurifierState = entity.getWPurifierState();
        if (wPurifierState != null) {
            stmt.bindString(59, wPurifierState);
        }
        stmt.bindLong(60, entity.getWPurifierFlowData());
        stmt.bindLong(61, entity.getWPurifierPrimaryQuqlity());
        stmt.bindLong(62, entity.getWPurifierCurTemp());
        stmt.bindLong(63, entity.getWPurifierOutQuqlity());
        stmt.bindLong(64, entity.getWPurifierfilter1());
        stmt.bindLong(65, entity.getWPurifierfilter2());
        stmt.bindLong(66, entity.getWPurifierfilter3());
        stmt.bindLong(67, entity.getWPurifierfilter4());
        stmt.bindLong(68, entity.getWPurifierfilter5());
        stmt.bindLong(69, entity.getWPurifierfilter6());
        stmt.bindLong(70, entity.getWPurifierfilter7());
        stmt.bindLong(71, entity.getWPurifierfilter8());
        stmt.bindLong(72, entity.getWPurifierfilter9());
        stmt.bindLong(73, entity.getWPurifierfilter10());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceChild readEntity(Cursor cursor, int offset) {
        DeviceChild entity = new DeviceChild( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // online
            cursor.getLong(offset + 2), // houseId
            cursor.getLong(offset + 3), // roomId
            cursor.getInt(offset + 4), // deviceUsedCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // roomName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // common
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // share
            cursor.getInt(offset + 8), // type
            cursor.getInt(offset + 9), // busModel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // macAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.getInt(offset + 12), // timerMoudle
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mcuVersion
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // wifiVersion
            cursor.getInt(offset + 15), // waramerSetTemp
            cursor.getInt(offset + 16), // warmerCurTemp
            cursor.getInt(offset + 17), // warmerSampleData
            cursor.getInt(offset + 18), // warmerRatePower
            cursor.getInt(offset + 19), // warmerCurRunRoatePower
            cursor.getInt(offset + 20), // warmerRunState
            cursor.getInt(offset + 21), // deviceState
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // rateState
            cursor.getInt(offset + 23), // lockState
            cursor.getInt(offset + 24), // screenState
            cursor.getInt(offset + 25), // curRunState2
            cursor.getInt(offset + 26), // curRunState3
            cursor.getInt(offset + 27), // timerHour
            cursor.getInt(offset + 28), // timerMin
            cursor.getInt(offset + 29), // checkCode
            cursor.getInt(offset + 30), // endCode
            cursor.getInt(offset + 31), // userId
            cursor.getInt(offset + 32), // img
            cursor.getInt(offset + 33), // deviceId
            cursor.getInt(offset + 34), // linked
            cursor.getInt(offset + 35), // linkedSensorId
            cursor.getLong(offset + 36), // shareId
            cursor.getInt(offset + 37), // sensorState
            cursor.getInt(offset + 38), // sensorSimpleTemp
            cursor.getInt(offset + 39), // sensorSimpleHum
            cursor.getInt(offset + 40), // sorsorPm
            cursor.getInt(offset + 41), // sensorOx
            cursor.getInt(offset + 42), // sensorHcho
            cursor.getInt(offset + 43), // socketPower
            cursor.getInt(offset + 44), // socketTemp
            cursor.getInt(offset + 45), // socketState
            cursor.getInt(offset + 46), // socketTimer
            cursor.getInt(offset + 47), // socketTimerOpenHour
            cursor.getInt(offset + 48), // socketTimerOpenMin
            cursor.getInt(offset + 49), // socketTimerCloseHour
            cursor.getInt(offset + 50), // socketTimerCloseMin
            cursor.getInt(offset + 51), // socketCurrent
            cursor.getInt(offset + 52), // socketVal
            cursor.getInt(offset + 53), // socketPowerConsume
            cursor.getInt(offset + 54), // socketTimerMode
            cursor.getInt(offset + 55), // isSocketTimerMode
            cursor.getInt(offset + 56), // wPurifierEndTime
            cursor.getInt(offset + 57), // wPurifierEndFlow
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // wPurifierState
            cursor.getInt(offset + 59), // wPurifierFlowData
            cursor.getInt(offset + 60), // wPurifierPrimaryQuqlity
            cursor.getInt(offset + 61), // wPurifierCurTemp
            cursor.getInt(offset + 62), // wPurifierOutQuqlity
            cursor.getInt(offset + 63), // wPurifierfilter1
            cursor.getInt(offset + 64), // wPurifierfilter2
            cursor.getInt(offset + 65), // wPurifierfilter3
            cursor.getInt(offset + 66), // wPurifierfilter4
            cursor.getInt(offset + 67), // wPurifierfilter5
            cursor.getInt(offset + 68), // wPurifierfilter6
            cursor.getInt(offset + 69), // wPurifierfilter7
            cursor.getInt(offset + 70), // wPurifierfilter8
            cursor.getInt(offset + 71), // wPurifierfilter9
            cursor.getInt(offset + 72) // wPurifierfilter10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceChild entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOnline(cursor.getShort(offset + 1) != 0);
        entity.setHouseId(cursor.getLong(offset + 2));
        entity.setRoomId(cursor.getLong(offset + 3));
        entity.setDeviceUsedCount(cursor.getInt(offset + 4));
        entity.setRoomName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShare(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
        entity.setBusModel(cursor.getInt(offset + 9));
        entity.setMacAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTimerMoudle(cursor.getInt(offset + 12));
        entity.setMcuVersion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWifiVersion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWaramerSetTemp(cursor.getInt(offset + 15));
        entity.setWarmerCurTemp(cursor.getInt(offset + 16));
        entity.setWarmerSampleData(cursor.getInt(offset + 17));
        entity.setWarmerRatePower(cursor.getInt(offset + 18));
        entity.setWarmerCurRunRoatePower(cursor.getInt(offset + 19));
        entity.setWarmerRunState(cursor.getInt(offset + 20));
        entity.setDeviceState(cursor.getInt(offset + 21));
        entity.setRateState(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLockState(cursor.getInt(offset + 23));
        entity.setScreenState(cursor.getInt(offset + 24));
        entity.setCurRunState2(cursor.getInt(offset + 25));
        entity.setCurRunState3(cursor.getInt(offset + 26));
        entity.setTimerHour(cursor.getInt(offset + 27));
        entity.setTimerMin(cursor.getInt(offset + 28));
        entity.setCheckCode(cursor.getInt(offset + 29));
        entity.setEndCode(cursor.getInt(offset + 30));
        entity.setUserId(cursor.getInt(offset + 31));
        entity.setImg(cursor.getInt(offset + 32));
        entity.setDeviceId(cursor.getInt(offset + 33));
        entity.setLinked(cursor.getInt(offset + 34));
        entity.setLinkedSensorId(cursor.getInt(offset + 35));
        entity.setShareId(cursor.getLong(offset + 36));
        entity.setSensorState(cursor.getInt(offset + 37));
        entity.setSensorSimpleTemp(cursor.getInt(offset + 38));
        entity.setSensorSimpleHum(cursor.getInt(offset + 39));
        entity.setSorsorPm(cursor.getInt(offset + 40));
        entity.setSensorOx(cursor.getInt(offset + 41));
        entity.setSensorHcho(cursor.getInt(offset + 42));
        entity.setSocketPower(cursor.getInt(offset + 43));
        entity.setSocketTemp(cursor.getInt(offset + 44));
        entity.setSocketState(cursor.getInt(offset + 45));
        entity.setSocketTimer(cursor.getInt(offset + 46));
        entity.setSocketTimerOpenHour(cursor.getInt(offset + 47));
        entity.setSocketTimerOpenMin(cursor.getInt(offset + 48));
        entity.setSocketTimerCloseHour(cursor.getInt(offset + 49));
        entity.setSocketTimerCloseMin(cursor.getInt(offset + 50));
        entity.setSocketCurrent(cursor.getInt(offset + 51));
        entity.setSocketVal(cursor.getInt(offset + 52));
        entity.setSocketPowerConsume(cursor.getInt(offset + 53));
        entity.setSocketTimerMode(cursor.getInt(offset + 54));
        entity.setIsSocketTimerMode(cursor.getInt(offset + 55));
        entity.setWPurifierEndTime(cursor.getInt(offset + 56));
        entity.setWPurifierEndFlow(cursor.getInt(offset + 57));
        entity.setWPurifierState(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setWPurifierFlowData(cursor.getInt(offset + 59));
        entity.setWPurifierPrimaryQuqlity(cursor.getInt(offset + 60));
        entity.setWPurifierCurTemp(cursor.getInt(offset + 61));
        entity.setWPurifierOutQuqlity(cursor.getInt(offset + 62));
        entity.setWPurifierfilter1(cursor.getInt(offset + 63));
        entity.setWPurifierfilter2(cursor.getInt(offset + 64));
        entity.setWPurifierfilter3(cursor.getInt(offset + 65));
        entity.setWPurifierfilter4(cursor.getInt(offset + 66));
        entity.setWPurifierfilter5(cursor.getInt(offset + 67));
        entity.setWPurifierfilter6(cursor.getInt(offset + 68));
        entity.setWPurifierfilter7(cursor.getInt(offset + 69));
        entity.setWPurifierfilter8(cursor.getInt(offset + 70));
        entity.setWPurifierfilter9(cursor.getInt(offset + 71));
        entity.setWPurifierfilter10(cursor.getInt(offset + 72));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceChild entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceChild entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceChild entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
