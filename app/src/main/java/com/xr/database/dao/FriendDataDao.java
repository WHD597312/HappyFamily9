package com.xr.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xr.happyFamily.le.pojo.FriendData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_DATA".
*/
public class FriendDataDao extends AbstractDao<FriendData, Long> {

    public static final String TABLENAME = "FRIEND_DATA";

    /**
     * Properties of entity FriendData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FrdId = new Property(1, int.class, "frdId", false, "FRD_ID");
        public final static Property SenderId = new Property(2, int.class, "senderId", false, "SENDER_ID");
        public final static Property SenderName = new Property(3, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SenderSex = new Property(4, String.class, "senderSex", false, "SENDER_SEX");
        public final static Property SenderAge = new Property(5, int.class, "senderAge", false, "SENDER_AGE");
        public final static Property SenderRemark = new Property(6, String.class, "senderRemark", false, "SENDER_REMARK");
    }


    public FriendDataDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FRD_ID\" INTEGER NOT NULL ," + // 1: frdId
                "\"SENDER_ID\" INTEGER NOT NULL ," + // 2: senderId
                "\"SENDER_NAME\" TEXT," + // 3: senderName
                "\"SENDER_SEX\" TEXT," + // 4: senderSex
                "\"SENDER_AGE\" INTEGER NOT NULL ," + // 5: senderAge
                "\"SENDER_REMARK\" TEXT);"); // 6: senderRemark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFrdId());
        stmt.bindLong(3, entity.getSenderId());
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(4, senderName);
        }
 
        String senderSex = entity.getSenderSex();
        if (senderSex != null) {
            stmt.bindString(5, senderSex);
        }
        stmt.bindLong(6, entity.getSenderAge());
 
        String senderRemark = entity.getSenderRemark();
        if (senderRemark != null) {
            stmt.bindString(7, senderRemark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFrdId());
        stmt.bindLong(3, entity.getSenderId());
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(4, senderName);
        }
 
        String senderSex = entity.getSenderSex();
        if (senderSex != null) {
            stmt.bindString(5, senderSex);
        }
        stmt.bindLong(6, entity.getSenderAge());
 
        String senderRemark = entity.getSenderRemark();
        if (senderRemark != null) {
            stmt.bindString(7, senderRemark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendData readEntity(Cursor cursor, int offset) {
        FriendData entity = new FriendData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // frdId
            cursor.getInt(offset + 2), // senderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // senderName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderSex
            cursor.getInt(offset + 5), // senderAge
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // senderRemark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrdId(cursor.getInt(offset + 1));
        entity.setSenderId(cursor.getInt(offset + 2));
        entity.setSenderName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenderAge(cursor.getInt(offset + 5));
        entity.setSenderRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
