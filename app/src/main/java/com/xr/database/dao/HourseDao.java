package com.xr.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xr.happyFamily.jia.pojo.Hourse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOURSE".
*/
public class HourseDao extends AbstractDao<Hourse, Long> {

    public static final String TABLENAME = "HOURSE";

    /**
     * Properties of entity Hourse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HouseId = new Property(0, Long.class, "houseId", true, "_id");
        public final static Property HouseName = new Property(1, String.class, "houseName", false, "HOUSE_NAME");
        public final static Property HouseAddress = new Property(2, String.class, "houseAddress", false, "HOUSE_ADDRESS");
        public final static Property UserId = new Property(3, int.class, "userId", false, "USER_ID");
    }


    public HourseDao(DaoConfig config) {
        super(config);
    }
    
    public HourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOURSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: houseId
                "\"HOUSE_NAME\" TEXT," + // 1: houseName
                "\"HOUSE_ADDRESS\" TEXT," + // 2: houseAddress
                "\"USER_ID\" INTEGER NOT NULL );"); // 3: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Hourse entity) {
        stmt.clearBindings();
 
        Long houseId = entity.getHouseId();
        if (houseId != null) {
            stmt.bindLong(1, houseId);
        }
 
        String houseName = entity.getHouseName();
        if (houseName != null) {
            stmt.bindString(2, houseName);
        }
 
        String houseAddress = entity.getHouseAddress();
        if (houseAddress != null) {
            stmt.bindString(3, houseAddress);
        }
        stmt.bindLong(4, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Hourse entity) {
        stmt.clearBindings();
 
        Long houseId = entity.getHouseId();
        if (houseId != null) {
            stmt.bindLong(1, houseId);
        }
 
        String houseName = entity.getHouseName();
        if (houseName != null) {
            stmt.bindString(2, houseName);
        }
 
        String houseAddress = entity.getHouseAddress();
        if (houseAddress != null) {
            stmt.bindString(3, houseAddress);
        }
        stmt.bindLong(4, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Hourse readEntity(Cursor cursor, int offset) {
        Hourse entity = new Hourse( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // houseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // houseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // houseAddress
            cursor.getInt(offset + 3) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Hourse entity, int offset) {
        entity.setHouseId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHouseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHouseAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Hourse entity, long rowId) {
        entity.setHouseId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Hourse entity) {
        if(entity != null) {
            return entity.getHouseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Hourse entity) {
        return entity.getHouseId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
